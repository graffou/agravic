#include "slv.h"
START_OF_FILE(tb)
INCLUDES
USE_PACKAGE(structures)
TESTBENCH(tb_t);
// For now, just implement vhdl and C++ codes separately
// for clock generation
#ifndef NONREG
#define UART_LOADING 1
#endif
#ifdef VHDL
constant c_clock_period : time := 5 ns;
constant c_reset_length : time := 20 ns;
#else



#endif



COMPONENT(sUART,
DECL_PORTS(
		PORT(clk_peri, CLK_TYPE, IN),
		PORT(reset_n, RST_TYPE, IN),
		PORT(core2mem_i, blk2mem_t, IN),
		PORT(mem2core_o, mem2blk_t, OUT),
		PORT(uart_tx_o, BIT_TYPE, OUT),
		PORT(uart_rx_i, BIT_TYPE, IN)
		)
);

COMPONENT(top,
DECL_PORTS(
		PORT(clk_top, CLK_TYPE, IN),
		PORT(reset_n, RST_TYPE, IN),
		//PORT(load_port_i, blk2mem_t, IN),
		// GPIOs
		/*
		PORT(uart_tx_o, BIT_TYPE, OUT),
		PORT(uart_rx_i, BIT_TYPE, IN),
		*/
		PORT(bmkrD_io, UINT(15), INOUT),
		PORT(bmkrA_io, UINT(7), INOUT),
		PORT(pclk_o, BIT_TYPE, OUT),
		PORT(red_o, BIT_TYPE, OUT),
		PORT(green_o, BIT_TYPE, OUT),
		PORT(blue_o, BIT_TYPE, OUT)//,
		//PORT(gpios_o, UINT(32), OUT)
		)
);


SIG(clk, CLK_TYPE);
SIG(reset_n, RST_TYPE);// reset_n;
SIG(cmd, blk2mem_t);
SIG(gpios, UINT(32));

SIG(blue, BIT_TYPE);
SIG(red, BIT_TYPE);
SIG(green, BIT_TYPE);
SIG(pclk, BIT_TYPE);
SIG(bmkrD, UINT(15));
SIG(bmkrA, UINT(7));

SIG(core2datamem, blk2mem_t);
SIG(uart2core, mem2blk_t);

SIG(sdram_addr, UINT(12));
SIG(sdram_ba, UINT(2));
SIG(sdram_cke, BIT_TYPE);
SIG(sdram_cs, BIT_TYPE);
SIG(sdram_we, BIT_TYPE);
SIG(sdram_ras, BIT_TYPE);
SIG(sdram_cas, BIT_TYPE);
SIG(sdram_dQm, UINT(2));
SIG(sdram_dQ, TRISTATE(16));


SIG(uart_rx, BIT_TYPE);
SIG(uart_tx, BIT_TYPE);
SIG(uart_dbg, BIT_TYPE);

SIG(spi_tx, BIT_TYPE);
SIG(spi_rx, BIT_TYPE);
SIG(spi_csn, BIT_TYPE);
SIG(spi_clk, BIT_TYPE);
SIG(spi2pluto, UINT(16));
SIG(spi2pluto_en,BIT_TYPE );
SIG(pluto2spi, UINT(16));
SIG(pluto2spi_en, BIT_TYPE);



#ifndef VHDL
int ncycles = 10000;
bool success = 1;
std::ifstream code_file;
std::ifstream check_file;
std::ifstream sig_start_file;


#endif

BEGIN




BLK_INST(dut, top,
		MAPPING(
				PM(clk_top, clk),
				PM(reset_n, reset_n),
				/*
				PM(uart_tx_o, sUART_tx),
				PM(uart_rx_i, sUART_rx)	,
				*/
				PM(bmkrD_io, bmkrD),
				PM(bmkrA_io, bmkrA),
				PM(blue_o, blue),
				PM(red_o, red),
				PM(green_o, green),
				PM(pclk_o, pclk),
				PM(sdram_addr_o,sdram_addr),
				PM(sdram_ba_o,sdram_ba),
				PM(sdram_cke_o,sdram_cke),
				PM(sdram_cs_o,sdram_cs),
				PM(sdram_we_o,sdram_we),
				PM(sdram_ras_o,sdram_ras),
				PM(sdram_cas_o,sdram_cas),
				PM(sdram_dQm_o,sdram_dQm),
				PM(sdram_dQ_io,sdram_dQ)				//PM(gpios_o, gpios)
				)
			);

// Instantiate this block AFTER top, because dut.mcu must exist before we can map it to clk_peri !!!!!!!!!!!!!!!!!!!!!!!!!!!!
BLK_INST(u0_sUART, sUART,
MAPPING(
		PM(clk_peri, dut.clk_mcu),
		PM(reset_n, reset_n),
		PM(core2mem_i, core2datamem),
		PM(mem2core_o, uart2core),
		PM(uart_tx_o, uart_tx),
		PM(uart_rx_i, uart_rx)
		)
);

BLK_INST(u0_SPI_wrapper, SPI_wrapper,
MAPPING(
		PM(clk_mcu, dut.clk_mcu),
		PM(reset_n, reset_n),
		PM(spi_clk_o, spi_clk),
		PM(spi_tx_o, spi_tx),
		PM(spi_rx_i, spi_rx),
		PM(spi_clk_o, spi_clk)
		)
);


#ifdef VHDL
gen_clk: process
begin
   wait for (c_clock_period / 2);
   clk <= not clk;
end process gen_clk;

gen_reset_n: process
begin
   wait for c_reset_length;
   reset_n <= '1';
   wait;
end process gen_reset_n;
#else

//#define LOAD_PORT cmd //(&top)->load_port
#define LOAD_PORT dut.load_port //(&top)->load_port


void init_clk_rst()
{
	bmkrD = 0xFFFF; // also init ports
	clk <= BIT(0);
	reset_n <= BIT(0);
}

template<class T>
void init_file( T& name_i)
{
	gstring name = name_i; // input is of input_parm<> type
	code_file.open(name.c_str(), std::ifstream::binary);
	gprintf("#VOpening code file %Y open %Y", name.c_str(), code_file.is_open());
	name.replace(".bin", ".sig_start");
	sig_start_file.open(name.c_str());
	name.replace("elf.sig_start", "reference_output");
	check_file.open(name.c_str());
	gprintf("#VOpening check file %Y open %Y", name.c_str(), check_file.is_open());
}

#define WAIT_5_CLK clk <= not clk;	clk <= not clk;clk <= not clk;	clk <= not clk;clk <= not clk;	clk <= not clk;clk <= not clk;	clk <= not clk;clk <= not clk;	clk <= not clk;

 void run()
{
	reset_n <= BIN(0);
	clk <= BIN(1);
	clk <= BIN(0);
	clk <= BIN(1);
	reset_n <= BIN(1);
	SIG_SET_BIT(bmkrD,14, BIT(1));
	uart_dbg <= BIT(1);
	uint32_t addr = 0;
	uint32_t end_addr = 0;

for (int k = 0; k < 1; k++)
{
	for (int i = 0; i < 300; i++) {WAIT_5_CLK} // wait for giorno core hdmi msg
	SIG_SET_BIT(bmkrD,8, BIT(0));// reset boot mode
	//SIG_SET_BIT(bmkrD,14, BIT(1));

#ifndef UART_LOADING
	LOAD_PORT.cs_n <= BIT(0);
	LOAD_PORT.wr_n <= BIT(0);
	LOAD_PORT.addr <= TO_UINT(0, LEN(LOAD_PORT.addr));
	LOAD_PORT.be <= BIN(1111);
#else
	for (int i = 0; i < 300; i++) {WAIT_5_CLK} // wait for giorno core hdmi msg
	LOAD_PORT.cs_n <= BIT(1);
	LOAD_PORT.wr_n <= BIT(1);
	SIG_SET_BIT(bmkrD,8, BIT(0));// set boot mode
	for (int i = 0; i < 32; i++)
		clk <= not clk;
	SIG_SET_BIT(bmkrD,8, BIT(1));// set boot mode
	for (int i = 0; i < 32; i++)
		clk <= not clk;
	//SIG_SET_BIT(bmkrD,14, BIT(1));

#endif
	clk <= not clk;
	clk <= not clk;	clk <= not clk; // add cycles so that the 48MHz clk can toggle (clk is 240MHz clk)
	clk <= not clk;	clk <= not clk;
	clk <= not clk;	clk <= not clk;
	clk <= not clk;

	for (int i = 0; i < 32; i++) {WAIT_5_CLK}


	while (not code_file.eof() and not(LOAD_PORT.addr == BIN(1011111111111) ))
	{
		//gprintf("% % \n", LOAD_PORT.addr, BIN(101111111111100));
		__control_signals__.clk = -1;
		__control_signals__.reset_n = -1;

		uint32_t data;
		code_file.read ((char*)&data, sizeof(data)); //>> data;

		LOAD_PORT.data <= slv<32>(data); // don't care for uart loading, cs_n is 1
		//printf("%x\n", data)
		if (LOAD_PORT.addr < BIN(0000000011100) ) {
			//gprintf("#Maddr : %R write %R %Y", to_hex(TO_INTEGER(LOAD_PORT.addr)), to_hex(TO_INTEGER(LOAD_PORT.data)), code_file.tellg());
		}
#ifdef NONREG // for risc-v compliance test, copy init data to data memory ALWAYS USE LOAD PORT
		if (addr >= 8192)
		{
			dut.u1_mem.set(addr/4, data);
			gprintf("#MLoading data mem % %", to_hex(addr/4), to_hex(data));
			gprintf("#Cmem content % %", to_hex(addr/4), to_hex(dut.u1_mem.get(addr/4)));
		}
#else

		for (int i = 0; i < 4; i++)
		{
			uint8_t byte = (data >> (i<<3)) & 0xFF;
			while (not (dut.clk_mcu.event()))
			{
				clk <= not clk;
				clk <= not clk;
			}
			core2datamem.addr <= 0x1ff0;
			//core2datamem.data <= (0x01A10000 | byte);
			core2datamem.data <= (0x00010000 | byte);
			core2datamem.cs_n <= BIT(0);
			core2datamem.wr_n <= BIT(0);

			//WAIT_5_CLK
			for (int k = 0; k < 10 ; k++)
			{
				clk <= not clk;
				SIG_SET_BIT(bmkrD,14, uart_tx);

			}

			core2datamem.cs_n <= BIT(1);

			//WAIT_5_CLK

			while (not u0_sUART.ready == BIT(1))
			{
#if 1
				clk <= not clk;
				SIG_SET_BIT(bmkrD,14, uart_tx);
				clk <= not clk;
				SIG_SET_BIT(bmkrD,14, uart_tx);
#else
				clk <= not clk;
				SIG_SET_BIT(bmkrD,14, 0);
				clk <= not clk;
				SIG_SET_BIT(bmkrD,14, 1);
#endif
			}
		}

		//gprintf("#Cmem content % %", to_hex(addr/4), to_hex(dut.u1_mem.get(addr/4)));

#endif
		//std::cerr << '>';
		// Take care of top clk being not the one that drives the risc-V core
		while (not (dut.clk_mcu.event()))
		{
			LOAD_PORT.addr <= TO_UINT(addr/4, LEN(LOAD_PORT.addr));//LOAD_PORT.addr + TO_UINT(4, LEN(LOAD_PORT.addr));
			clk <= not clk;
			clk <= not clk;
		}
		addr = addr + 4;
		clk <= not clk;
		clk <= not clk;

		//std::cerr << '/';
	}

	for (int i = 0; i < 32; i++) {WAIT_5_CLK}
	SIG_SET_BIT(bmkrD,8, BIT(0));// reset boot mode
	//code_file.close();
	code_file.clear();
	code_file.seekg( 0, std::ios::beg );
	if (code_file.eof())
	{
		gprintf("#Rcode file not reopen");
		exit(0);
	};
	addr = 0;
	LOAD_PORT.addr = 0;
}
#ifndef UART_LOADING
	gprintf("#VEnded code loading addr % eof % ", LOAD_PORT.addr, code_file.eof());
	LOAD_PORT.cs_n <= BIT(1);
	LOAD_PORT.wr_n <= BIT(1);
#endif
	clk <= not clk;
	clk <= not clk;

	gprintf("#VStarting simulation, % ", ncycles);
	for (int i = 0; i < ncycles*2 ; i++)
	{
		//std::cerr << '.';
		clk <= not clk;
		//gpios <= BIN(10101010010101011111111100000000);


		// Configure TB IPs from FW -------------------
		// Address range 0x1e00-1eFF


		if ( (dut.core2datamem.addr and 0x1f00) == 0x1e00 )
		{
			core2datamem <= dut.core2datamem;
			core2datamem.addr <= core2datamem.addr + 0x100;
			//gprintf("#RYoooooooooooooooooooooooooooo % ", to_hex(TO_INTEGER(dut.core2datamem.addr)), to_hex(TO_INTEGER(dut.core2datamem.data)));
			//exit(0);

		}
		else
			core2datamem.cs_n = 1;

		uart_rx <= B(bmkrD, 13);
		SIG_SET_BIT(bmkrD,14, uart_tx);
		//bmkrD <= bmkrD;
		dut.tb2core = uart2core;


	}
#ifdef NONREG
	for (int i= 2048; i < 2100;i++)
		gprintf("#Cmem content % %", to_hex(i), to_hex(dut.u1_mem.get(i)));
	for (int i= 0; i < 200;i++)
		gprintf("#Mmem content % %", to_hex(i), to_hex(dut.u0_mem.get(i)));
	sig_start_file >> std::hex >> addr;
	std::string yo;
	sig_start_file >> std::hex >> yo; // reads end of line:
	sig_start_file >> std::hex >> end_addr;
	gprintf("#VTesting signature from %Y to %Y", to_hex(addr), to_hex(end_addr));
	addr = addr >> 2;
	end_addr = end_addr >> 2;
	gprintf("#VTesting signature from %Y to %Y", to_hex(addr), to_hex(end_addr));
	while (not check_file.eof())
	{
		uint32_t check_val;
		check_file >> std::hex >> check_val;
		if (not check_file.eof() and (addr <= end_addr) )
		{
			if (check_val == dut.u1_mem.get(addr))
				gprintf("#GChecking % % %", addr, to_hex(check_val), to_hex(dut.u1_mem.get(addr)));
			else
			{
				success = 0;
				gprintf("#RChecking % % %", addr, to_hex(check_val), to_hex(dut.u1_mem.get(addr)));
			}
		}

		addr ++;
	}
#endif

}

#endif // VHDL


BLK_END;
